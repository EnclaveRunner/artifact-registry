// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v6.32.1
// source: registry.proto

package proto_gen

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RegistryServiceClient is the client API for RegistryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RegistryServiceClient interface {
	QueryArtifacts(ctx context.Context, in *ArtifactQuery, opts ...grpc.CallOption) (*ArtifactListResponse, error)
	PullArtifact(ctx context.Context, in *PullArtifactRequest, opts ...grpc.CallOption) (RegistryService_PullArtifactClient, error)
	UploadArtifact(ctx context.Context, in *UploadArtifactRequest, opts ...grpc.CallOption) (*Artifact, error)
	DeleteArtifact(ctx context.Context, in *ArtifactIdentifier, opts ...grpc.CallOption) (*Artifact, error)
	GetArtifact(ctx context.Context, in *ArtifactIdentifier, opts ...grpc.CallOption) (*Artifact, error)
	AddTag(ctx context.Context, in *AddRemoveTagRequest, opts ...grpc.CallOption) (*Artifact, error)
	RemoveTag(ctx context.Context, in *AddRemoveTagRequest, opts ...grpc.CallOption) (*Artifact, error)
}

type registryServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRegistryServiceClient(cc grpc.ClientConnInterface) RegistryServiceClient {
	return &registryServiceClient{cc}
}

func (c *registryServiceClient) QueryArtifacts(ctx context.Context, in *ArtifactQuery, opts ...grpc.CallOption) (*ArtifactListResponse, error) {
	out := new(ArtifactListResponse)
	err := c.cc.Invoke(ctx, "/registry.RegistryService/QueryArtifacts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registryServiceClient) PullArtifact(ctx context.Context, in *PullArtifactRequest, opts ...grpc.CallOption) (RegistryService_PullArtifactClient, error) {
	stream, err := c.cc.NewStream(ctx, &RegistryService_ServiceDesc.Streams[0], "/registry.RegistryService/PullArtifact", opts...)
	if err != nil {
		return nil, err
	}
	x := &registryServicePullArtifactClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type RegistryService_PullArtifactClient interface {
	Recv() (*ArtifactContent, error)
	grpc.ClientStream
}

type registryServicePullArtifactClient struct {
	grpc.ClientStream
}

func (x *registryServicePullArtifactClient) Recv() (*ArtifactContent, error) {
	m := new(ArtifactContent)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *registryServiceClient) UploadArtifact(ctx context.Context, in *UploadArtifactRequest, opts ...grpc.CallOption) (*Artifact, error) {
	out := new(Artifact)
	err := c.cc.Invoke(ctx, "/registry.RegistryService/UploadArtifact", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registryServiceClient) DeleteArtifact(ctx context.Context, in *ArtifactIdentifier, opts ...grpc.CallOption) (*Artifact, error) {
	out := new(Artifact)
	err := c.cc.Invoke(ctx, "/registry.RegistryService/DeleteArtifact", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registryServiceClient) GetArtifact(ctx context.Context, in *ArtifactIdentifier, opts ...grpc.CallOption) (*Artifact, error) {
	out := new(Artifact)
	err := c.cc.Invoke(ctx, "/registry.RegistryService/GetArtifact", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registryServiceClient) AddTag(ctx context.Context, in *AddRemoveTagRequest, opts ...grpc.CallOption) (*Artifact, error) {
	out := new(Artifact)
	err := c.cc.Invoke(ctx, "/registry.RegistryService/AddTag", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registryServiceClient) RemoveTag(ctx context.Context, in *AddRemoveTagRequest, opts ...grpc.CallOption) (*Artifact, error) {
	out := new(Artifact)
	err := c.cc.Invoke(ctx, "/registry.RegistryService/RemoveTag", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RegistryServiceServer is the server API for RegistryService service.
// All implementations must embed UnimplementedRegistryServiceServer
// for forward compatibility
type RegistryServiceServer interface {
	QueryArtifacts(context.Context, *ArtifactQuery) (*ArtifactListResponse, error)
	PullArtifact(*PullArtifactRequest, RegistryService_PullArtifactServer) error
	UploadArtifact(context.Context, *UploadArtifactRequest) (*Artifact, error)
	DeleteArtifact(context.Context, *ArtifactIdentifier) (*Artifact, error)
	GetArtifact(context.Context, *ArtifactIdentifier) (*Artifact, error)
	AddTag(context.Context, *AddRemoveTagRequest) (*Artifact, error)
	RemoveTag(context.Context, *AddRemoveTagRequest) (*Artifact, error)
	mustEmbedUnimplementedRegistryServiceServer()
}

// UnimplementedRegistryServiceServer must be embedded to have forward compatible implementations.
type UnimplementedRegistryServiceServer struct {
}

func (UnimplementedRegistryServiceServer) QueryArtifacts(context.Context, *ArtifactQuery) (*ArtifactListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryArtifacts not implemented")
}
func (UnimplementedRegistryServiceServer) PullArtifact(*PullArtifactRequest, RegistryService_PullArtifactServer) error {
	return status.Errorf(codes.Unimplemented, "method PullArtifact not implemented")
}
func (UnimplementedRegistryServiceServer) UploadArtifact(context.Context, *UploadArtifactRequest) (*Artifact, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadArtifact not implemented")
}
func (UnimplementedRegistryServiceServer) DeleteArtifact(context.Context, *ArtifactIdentifier) (*Artifact, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteArtifact not implemented")
}
func (UnimplementedRegistryServiceServer) GetArtifact(context.Context, *ArtifactIdentifier) (*Artifact, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetArtifact not implemented")
}
func (UnimplementedRegistryServiceServer) AddTag(context.Context, *AddRemoveTagRequest) (*Artifact, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddTag not implemented")
}
func (UnimplementedRegistryServiceServer) RemoveTag(context.Context, *AddRemoveTagRequest) (*Artifact, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveTag not implemented")
}
func (UnimplementedRegistryServiceServer) mustEmbedUnimplementedRegistryServiceServer() {}

// UnsafeRegistryServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RegistryServiceServer will
// result in compilation errors.
type UnsafeRegistryServiceServer interface {
	mustEmbedUnimplementedRegistryServiceServer()
}

func RegisterRegistryServiceServer(s grpc.ServiceRegistrar, srv RegistryServiceServer) {
	s.RegisterService(&RegistryService_ServiceDesc, srv)
}

func _RegistryService_QueryArtifacts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ArtifactQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistryServiceServer).QueryArtifacts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/registry.RegistryService/QueryArtifacts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistryServiceServer).QueryArtifacts(ctx, req.(*ArtifactQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _RegistryService_PullArtifact_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(PullArtifactRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RegistryServiceServer).PullArtifact(m, &registryServicePullArtifactServer{stream})
}

type RegistryService_PullArtifactServer interface {
	Send(*ArtifactContent) error
	grpc.ServerStream
}

type registryServicePullArtifactServer struct {
	grpc.ServerStream
}

func (x *registryServicePullArtifactServer) Send(m *ArtifactContent) error {
	return x.ServerStream.SendMsg(m)
}

func _RegistryService_UploadArtifact_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadArtifactRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistryServiceServer).UploadArtifact(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/registry.RegistryService/UploadArtifact",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistryServiceServer).UploadArtifact(ctx, req.(*UploadArtifactRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RegistryService_DeleteArtifact_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ArtifactIdentifier)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistryServiceServer).DeleteArtifact(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/registry.RegistryService/DeleteArtifact",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistryServiceServer).DeleteArtifact(ctx, req.(*ArtifactIdentifier))
	}
	return interceptor(ctx, in, info, handler)
}

func _RegistryService_GetArtifact_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ArtifactIdentifier)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistryServiceServer).GetArtifact(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/registry.RegistryService/GetArtifact",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistryServiceServer).GetArtifact(ctx, req.(*ArtifactIdentifier))
	}
	return interceptor(ctx, in, info, handler)
}

func _RegistryService_AddTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddRemoveTagRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistryServiceServer).AddTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/registry.RegistryService/AddTag",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistryServiceServer).AddTag(ctx, req.(*AddRemoveTagRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RegistryService_RemoveTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddRemoveTagRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistryServiceServer).RemoveTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/registry.RegistryService/RemoveTag",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistryServiceServer).RemoveTag(ctx, req.(*AddRemoveTagRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RegistryService_ServiceDesc is the grpc.ServiceDesc for RegistryService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RegistryService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "registry.RegistryService",
	HandlerType: (*RegistryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "QueryArtifacts",
			Handler:    _RegistryService_QueryArtifacts_Handler,
		},
		{
			MethodName: "UploadArtifact",
			Handler:    _RegistryService_UploadArtifact_Handler,
		},
		{
			MethodName: "DeleteArtifact",
			Handler:    _RegistryService_DeleteArtifact_Handler,
		},
		{
			MethodName: "GetArtifact",
			Handler:    _RegistryService_GetArtifact_Handler,
		},
		{
			MethodName: "AddTag",
			Handler:    _RegistryService_AddTag_Handler,
		},
		{
			MethodName: "RemoveTag",
			Handler:    _RegistryService_RemoveTag_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "PullArtifact",
			Handler:       _RegistryService_PullArtifact_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "registry.proto",
}
